<?php

namespace {{NAMESPACE}};

use Zahzah\LaravelSupport\{
    Contracts\DataManagement,
    Supports\PackageManagement
};

class {{CLASS_NAME}} extends PackageManagement implements DataManagement{
    //public function booting(): self{
        static::$__class = $this;
        static::$__model = $this->{$this->__entity."Model"}();
        return $this;
}

protected array $__guard  = []; 
    protected array $__add      = [];
    protected string $__entity  = '{{CLASS_NAME}}';

    protected $__{{LOWER_CLASS_NAME}};

    /**
     * This function is accessed first when the schema is used.
     *
     * It sets the $__{{LOWER_CLASS_NAME}} property with the value of the {{CLASS_NAME}} model.
     * This property is used to store the model that is being used by the schema.
     *
     * @return void
     */
    protected function booting(): void{
        parent::booting();
        $this->__{{LOWER_CLASS_NAME}} = $this->{{CLASS_NAME}}();
    }

    /**
     * Add a new API access or update the existing one if found.
     *
     * The given attributes will be merged with the existing API access.
     *
     * @param array $attributes The attributes to be added to the API access.
     *
     * @return \Illuminate\Database\Eloquent\Model The API access model.
     */
    public function addOrChange(? array $attributes=[]): self{    
        static::$__model = $this->{{CLASS_NAME}}Model()->updateOrCreate(...$this->createInit($this->__add,$attributes));
        $__{{LOWER_CLASS_NAME}} = static::$__model;
        return $this;
    }

    /**
     * You can use add, or change separately
     */
    //public function add(? array $attributes=[]): self;

    //public function change(? array $attributes=[]): self;

    public function remove(mixed $id = null): self{
        $id ??= $this->__{{LOWER_CLASS_NAME}}->getKey();
        if (isset($id)) $this->{{CLASS_NAME}}Model()->delete($id);
        return $this;
    }

    /**
     * Show the data.
     *
     * @return mixed
     */
    public function show(string|callable|array $conditionals = [],mixed $id = null): self{
        return $this->__{{LOWER_CLASS_NAME}} ??= $this->{{CLASS_NAME}}Model()->conditionals($conditionals)->findOrFail($id);
    }
}